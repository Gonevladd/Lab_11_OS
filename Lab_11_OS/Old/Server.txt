#include <iostream>
#include  <string>
#include <ws2tcpip.h>
#pragma comment (lib, "ws2_32.lib")
using namespace std;

int main()
{
    //Initialize winsock
    WSADATA wsData;
    WORD ver = MAKEWORD(2, 2);

    int wsOk = WSAStartup(ver, &wsData);
    if (wsOk != 0) {
        cerr << "Can`t initialize winsock!" << endl;
        return 1;
    }

    //Create socket
    SOCKET listening = socket(AF_INET, SOCK_STREAM, 0);
    if (listening == INVALID_SOCKET) {
        cerr << "Can`t create a socket!" << endl;
        return 1;
    }

    //Bind ip address and port to a socket
    sockaddr_in hint;
    hint.sin_family = AF_INET;
    hint.sin_port = htons(54000);
    hint.sin_addr.S_un.S_addr = INADDR_ANY; //Could also use inet_pton

    bind(listening, (sockaddr*)&hint, sizeof(hint));

    //Tell winsock the socket is for listening 
    listen(listening, SOMAXCONN);

    //Wait for a connection
    sockaddr_in client;
    int clientSize = sizeof(client);

    SOCKET clientSocket = accept(listening, (sockaddr*)&client, &clientSize);
    if (clientSocket == INVALID_SOCKET) {
        cerr << "Can`t create a socket!" << endl;
        return 1;
    }

    char host[NI_MAXHOST];  //Client`s remote name
    char service[NI_MAXSERV];   //Service port the client is connect on

    ZeroMemory(host, NI_MAXHOST);
    ZeroMemory(service, NI_MAXSERV);

    if (!getnameinfo((sockaddr*)&client, sizeof(client), host, NI_MAXHOST, service, NI_MAXSERV, 0)) {
        cout << host << " connected on port " << service << endl;
    }
    else {
        inet_ntop(AF_INET, &client.sin_addr, host, NI_MAXHOST);
        cout << host << " connected on port " << ntohs(client.sin_port) << endl;
    }

    //Close listening socket
    closesocket(listening);

    //While loop: accept and echo message back to client
    char buf[4096];

    while (1) {
        ZeroMemory(buf, 4096);

        //Wait for client to send data
        int bytesReceived = recv(clientSocket, buf, 4096, 0);
        if (bytesReceived == SOCKET_ERROR) {
            cerr << "Error in recv()!" << endl;
            break;
        }

        if (!bytesReceived) {
            cout << "Client disconnected!" << endl;
            break;
        }
        //My code==============================================================
        string userInput;
        cout << "User 1 > " << buf << endl;
        cout << "> ";
        getline(cin, userInput);


        send(clientSocket, userInput.c_str(), userInput.size() + 1, 0);

        //My code==============================================================

        //Echo message back to client
        
        //send(clientSocket, buf, bytesReceived + 1, 0);        !!!
    }

    //Close the socket
    closesocket(clientSocket);

    //Cleanup winsock
    WSACleanup();
    getchar();
}
